plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'application'
    id 'idea'
    id 'java'
    id 'maven-publish'
}

group = "dev.zontreck.harbinger"
archivesBaseName = "server"
repositories {
    // Use Maven Central for resolving dependencies.
    // mavenCentral()

}
if (System.getenv("IN_DOCKER") == "true"){
    repositories {
        maven {
            url = "http://srv02.zontreck.dev:9980/repository/internal"
            allowInsecureProtocol = true
            name = "Aria's Creations Caches Fallback"
        }
        maven {
            url = "http://srv02.zontreck.dev:9980/repository/zontreck"
            allowInsecureProtocol = true
            name = "Aria's Creations Fallback"
        }
    }
}else {
    repositories {
        maven {
            url = "https://maven.zontreck.dev/repository/internal"
            name = "Aria's Creations Cache"
        }
        maven {
            url = "https://maven.zontreck.dev/repository/zontreck"
            name = "Aria's Creations"
        }
    }
}
dependencies {

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation ("org.apache.logging.log4j:log4j-core:${log4j_version}")
    compileOnly ("org.apache.logging.log4j:log4j-api:${log4j_version}")
    implementation ("org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}")

    implementation( "com.fasterxml.jackson.core:jackson-core:${jackson_version}")
    implementation( "com.fasterxml.jackson.core:jackson-databind:${jackson_version}")
    implementation( "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}")

    implementation("net.dv8tion:JDA:${JDA_Version}")

    implementation("org.json:json:20230227")

    implementation ("dev.zontreck:LibAC:${libac_version}")
    implementation("commons-io:commons-io:2.13.0")

    implementation("org.apache.commons:commons-lang3:3.12.0")

    implementation("org.simpleframework:simple-xml:2.7.1")

    implementation("org.mongodb:mongodb-driver-sync:${mongodb_version}")
    implementation("ch.qos.logback:logback-classic:${logback_version}")

}

application {
    // Define the main class for the application.
    mainClass = 'dev.zontreck.harbinger.HarbingerServer'
}

def determinePatchVersion = {
    // get the name of the last tag
    def tagInfo = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = tagInfo
    }
    tagInfo = tagInfo.toString()

    if (!tagInfo.contains('-')) {
        return 0
    }
    return tagInfo.split("-")[1]
}
version = determinePatchVersion()
shadowJar{
    archiveBaseName="Harbinger"
    version="${myVersion}.${version}"
    duplicatesStrategy="exclude"

    manifest {
        attributes (
                'Main-Class': "${mainClass}",
                'Specification-Version': myVersion,
                'Implementation-Version': version,
                'Implementation-Title': "Harbinger",
                'Specification-Title': "Harbinger-API"
        )
    }
}
artifacts {
    archives shadowJar
}


def MAVEN_PASSWORD_PROPERTY = "AriasCreationsMavenPassword"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            artifact jar
        }
    }
    repositories {
        maven {
            url = "https://maven.zontreck.dev/repository/zontreck"
            name = "ariascreations"
            if (project.findProperty(MAVEN_PASSWORD_PROPERTY) != null) {
                credentials {
                    username = "admin"
                    password = project.findProperty(MAVEN_PASSWORD_PROPERTY)
                }
            }
        }
    }
}